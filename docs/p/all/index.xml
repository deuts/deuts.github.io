<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>All Posts on Deuts Log</title>
    <link>https://deuts.org/p/all/</link>
    <description>Recent content in All Posts on Deuts Log</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <copyright>2024 Deuts Log</copyright>
    <lastBuildDate>Fri, 20 Jun 2025 15:20:12 +0800</lastBuildDate>
    <atom:link href="https://deuts.org/p/all/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using the Action Button Widget in Grist to Automate Table Operations</title>
      <link>https://deuts.org/p/grist-action-button-widget/</link>
      <pubDate>Fri, 20 Jun 2025 15:20:12 +0800</pubDate>
      <guid>https://deuts.org/p/grist-action-button-widget/</guid>
      <description>Learn how to use Grist&amp;#39;s Action Button widget to automate adding, updating, and deleting records.</description>
      <content:encoded><![CDATA[<p>Grist‚Äôs interface is packed with powerful features, but one particularly useful tool that flies under the radar is the <strong>Action Button widget</strong>. Despite the lack of official documentation, this widget allows you to define complex workflows‚Äîlike inserting, updating, or deleting records‚Äîtriggered by a single button click.</p>
<p>This is useful for automating repetitive operations without needing webhooks or external integrations.</p>
<h3 id="-what-is-the-action-button">üß† What Is the Action Button?</h3>
<p>The Action Button widget displays a clickable button in your table. When clicked, it executes one or more actions‚Äîsuch as adding, updating, or removing records‚Äîbased on logic you define in a separate column.</p>
<h3 id="-anatomy-of-the-action-button">üèóÔ∏è Anatomy of the Action Button</h3>
<p>To use the Action Button, create a <strong>formula column</strong> that returns a dictionary with three keys:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Text explaining what the button does&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;button&#34;</span>: <span style="color:#e6db74">&#34;Label shown on the button&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;actions&#34;</span>: [<span style="color:#f92672">/*</span> list of actions <span style="color:#f92672">*/</span>]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>‚ö†Ô∏è <strong>Important:</strong></p>
<ul>
<li>Set the <strong>Column Type</strong> to <code>Any</code>‚Äîthis is required for the JSON-like object to work.</li>
<li>The column must be <strong>visible</strong> while editing the formula, but it can be <strong>hidden</strong> afterward.</li>
<li>In the Action Button widget settings, set <strong>Access Level</strong> to <strong>Full document access</strong>. Without this, the button won‚Äôt be able to make changes.</li>
</ul>
<h3 id="-supported-actions">‚öôÔ∏è Supported Actions</h3>
<p>Each entry in the <code>&quot;actions&quot;</code> array is itself a list. Here are the most common types:</p>
<h4 id="-addrecord">‚ûï <code>AddRecord</code></h4>
<p>Adds a new row to the specified table.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>[<span style="color:#e6db74">&#34;AddRecord&#34;</span>, <span style="color:#e6db74">&#34;TableId&#34;</span>, <span style="color:#66d9ef">None</span>, { <span style="color:#e6db74">&#34;ColName&#34;</span>: value, <span style="color:#f92672">...</span> }]
</span></span></code></pre></div><h4 id="-updaterecord">‚úèÔ∏è <code>UpdateRecord</code></h4>
<p>Updates a specific row by ID.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>[<span style="color:#e6db74">&#34;UpdateRecord&#34;</span>, <span style="color:#e6db74">&#34;TableId&#34;</span>, rowId, { <span style="color:#e6db74">&#34;ColName&#34;</span>: newValue }]
</span></span></code></pre></div><h4 id="-removerecord">‚ùå <code>RemoveRecord</code></h4>
<p>Deletes a row from the table.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>[<span style="color:#e6db74">&#34;RemoveRecord&#34;</span>, <span style="color:#e6db74">&#34;TableId&#34;</span>, rowId]
</span></span></code></pre></div><h3 id="-example-1-copy-and-increment">‚úÖ Example 1: Copy and Increment</h3>
<p>This example:</p>
<ul>
<li>Adds a new row to a table named <code>&quot;Data&quot;</code> with values from the current row.</li>
<li>Increments a number field in the current table.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;button&#34;</span>: <span style="color:#e6db74">&#34;Copy to Data&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Copy &#34;</span> <span style="color:#f92672">+</span> <span style="color:#960050;background-color:#1e0010">$</span>Name <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; to Data Table&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;actions&#34;</span>: [
</span></span><span style="display:flex;"><span>    [
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;AddRecord&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;Data&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">None</span>,
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Title&#34;</span>: <span style="color:#960050;background-color:#1e0010">$</span>Name,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Body&#34;</span>: <span style="color:#960050;background-color:#1e0010">$</span>Description,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Number&#34;</span>: <span style="color:#960050;background-color:#1e0010">$</span>Number,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Table1Data&#34;</span>: <span style="color:#960050;background-color:#1e0010">$</span>id
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    ],
</span></span><span style="display:flex;"><span>    [
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;UpdateRecord&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#e6db74">&#34;Table1&#34;</span>,
</span></span><span style="display:flex;"><span>      <span style="color:#960050;background-color:#1e0010">$</span>id,
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;Number&#34;</span>: <span style="color:#960050;background-color:#1e0010">$</span>Number <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>  ]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="-example-2-delete-the-current-record">üóëÔ∏è Example 2: Delete the Current Record</h3>
<p>This example deletes the current row from a table named <code>&quot;Logs&quot;</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;button&#34;</span>: <span style="color:#e6db74">&#34;Delete&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Remove this log entry&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#34;actions&#34;</span>: [
</span></span><span style="display:flex;"><span>    [<span style="color:#e6db74">&#34;RemoveRecord&#34;</span>, <span style="color:#e6db74">&#34;Logs&#34;</span>, <span style="color:#960050;background-color:#1e0010">$</span>id]
</span></span><span style="display:flex;"><span>  ]
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Use with caution‚Äîthere‚Äôs no confirmation prompt.</p>
<h3 id="-how-to-set-it-up-step-by-step">üõ†Ô∏è How to Set It Up (Step-by-Step)</h3>
<ol>
<li>
<p><strong>Add a formula column</strong> to the table you want to work with.</p>
</li>
<li>
<p>Set the <strong>Column Type</strong> to <code>Any</code>‚Äîthis is required for the JSON-style dictionary to work.</p>
</li>
<li>
<p>Write a formula that returns an object with <code>button</code>, <code>description</code>, and <code>actions</code> keys.</p>
</li>
<li>
<p>Save the column.</p>
</li>
<li>
<p>Add an <strong>Action Button widget</strong> to your page:</p>
<ul>
<li>
<p>Under <strong>SELECT BY</strong>, choose the same table where you created the formula column.</p>
</li>
<li>
<p>In the widget‚Äôs settings:</p>
<ul>
<li>Set <strong>Access Level</strong> to <strong>Full document access</strong>.</li>
<li>Select your formula column from the <strong>Action</strong> dropdown.</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>Once set up, a button will appear for each row. Clicking it will trigger the actions you&rsquo;ve defined‚Äîwhether it&rsquo;s to add, update, or delete records.</p>
<h3 id="-tips-and-considerations">üìù Tips and Considerations</h3>
<ul>
<li>You can <strong>chain multiple actions</strong> into one button.</li>
<li>Use <code>$</code> variables (e.g. <code>$id</code>, <code>$Name</code>) to reference values from the current row.</li>
<li>Set the <strong>column type to <code>Any</code></strong>.</li>
<li>The <strong>column must be visible</strong> when writing the formula but can be <strong>hidden</strong> after that.</li>
<li>In the widget settings, <strong>set Access Level to ‚ÄúFull document access‚Äù</strong> to allow full CRUD actions.</li>
</ul>
<h3 id="-limitations">üöß Limitations</h3>
<ul>
<li>No official documentation as of writing.</li>
<li>No error handling or confirmation dialogs.</li>
<li>Only works within the current document (not cross-document).</li>
</ul>
<hr>
<p>Despite being unofficial and hidden in plain sight, the Action Button widget in Grist is a powerful tool for building automations directly into your tables. Whether you‚Äôre copying rows, updating values, or deleting obsolete entries, this widget can take your workflows from manual to magical with just one click.</p>
<p>Let your tables take action‚Äîliterally.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Connect to Grist API in Power BI Using Power Query</title>
      <link>https://deuts.org/p/connect-grist-api-power-query/</link>
      <pubDate>Wed, 18 Jun 2025 19:26:43 +0800</pubDate>
      <guid>https://deuts.org/p/connect-grist-api-power-query/</guid>
      <description>A step-by-step Power Query function to retrieve and expand Grist records using the Grist API, with clean URL handling and dynamic column extraction.</description>
      <content:encoded><![CDATA[<p>Grist is a powerful alternative to spreadsheets with an API that&rsquo;s friendly to integration. If you&rsquo;re using Power BI and want to pull data directly from your Grist tables, here‚Äôs a reusable Power Query function that gets the job done.</p>
<h3 id="the-function">The Function</h3>
<p>This M function takes four parameters:</p>
<ul>
<li><code>API_Key</code>: your Grist API token</li>
<li><code>Team_URL</code>: your team‚Äôs Grist base URL</li>
<li><code>Doc_ID</code>: the document ID, get this from the document settings</li>
<li><code>Table_ID</code>: the table name within that document</li>
</ul>
<p>It builds the full API URL, calls the endpoint, and expands the returned records into a Power BI table.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powerquery" data-lang="powerquery"><span style="display:flex;"><span><span style="color:#75715e">// This function fetches and returns a table of records from a specific Grist document table.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// Parameters:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//   API_Key   - Your Grist API token as a text string (e.g., &#34;abc123...&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//   Team_URL  - The base URL of your Grist team site (e.g., &#34;https://docs.getgrist.com&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//   Doc_ID    - The ID of the document you want to access
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//   Table_ID  - The ID of the table within that document
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>(
</span></span><span style="display:flex;"><span>  API_Key <span style="color:#66d9ef">as</span> text<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  Team_URL <span style="color:#66d9ef">as</span> text<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  Doc_ID <span style="color:#66d9ef">as</span> text<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>  Table_ID <span style="color:#66d9ef">as</span> text
</span></span><span style="display:flex;"><span>) <span style="color:#f92672">=&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Ensure no trailing slash in the team URL
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  CleanTeamURL <span style="color:#f92672">=</span> Text.TrimEnd(Team_URL<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;/&#34;</span>)<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Build the full API endpoint URL
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  Full_URL <span style="color:#f92672">=</span> CleanTeamURL <span style="color:#f92672">&amp;</span> <span style="color:#e6db74">&#34;/api/docs/&#34;</span> <span style="color:#f92672">&amp;</span> Doc_ID <span style="color:#f92672">&amp;</span> <span style="color:#e6db74">&#34;/tables/&#34;</span> <span style="color:#f92672">&amp;</span> Table_ID <span style="color:#f92672">&amp;</span> <span style="color:#e6db74">&#34;/records&#34;</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Define the request headers with authorization and expected content type
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  RequestHeaders <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    #&#34;Authorization&#34; <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Bearer &#34;</span> <span style="color:#f92672">&amp;</span> API_Key<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    #&#34;Accept&#34; <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;application/json&#34;</span>
</span></span><span style="display:flex;"><span>  ]<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Make the web request and parse the JSON response
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  RecordsList <span style="color:#f92672">=</span> Json.Document(Web.Contents(Full_URL<span style="color:#f92672">,</span> [Headers <span style="color:#f92672">=</span> RequestHeaders]))<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Extract the list of records from the JSON
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  ExpandRecord <span style="color:#f92672">=</span> RecordsList[records]<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Convert the list of records to a table
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  ListToTable <span style="color:#f92672">=</span> Table.FromList(
</span></span><span style="display:flex;"><span>    ExpandRecord<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    Splitter.SplitByNothing()<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">null</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">null</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    ExtraValues.Error
</span></span><span style="display:flex;"><span>  )<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Expand the outer record structure (e.g., id, fields)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  ExpandCols <span style="color:#f92672">=</span> Table.ExpandRecordColumn(
</span></span><span style="display:flex;"><span>    ListToTable<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Column1&#34;</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    Record.FieldNames(ListToTable{<span style="color:#ae81ff">0</span>}[Column1])
</span></span><span style="display:flex;"><span>  )<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Expand the &#39;fields&#39; record into actual table columns
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  ExpandFields <span style="color:#f92672">=</span> Table.ExpandRecordColumn(
</span></span><span style="display:flex;"><span>    ExpandCols<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;fields&#34;</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>    Record.FieldNames(ExpandCols{<span style="color:#ae81ff">0</span>}[fields])
</span></span><span style="display:flex;"><span>  )
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>  ExpandFields
</span></span></code></pre></div><h3 id="function-notes">Function Notes</h3>
<ul>
<li><code>Text.TrimEnd</code> ensures the base URL is consistent regardless of user input.</li>
<li>It dynamically extracts field names, making it robust against changes in your Grist schema.</li>
<li>All requests use standard bearer token authorization.</li>
<li>Ideal for use in Power BI reports that need to pull live data from Grist.</li>
</ul>
<h3 id="questions">Questions</h3>
<h4 id="can-i-use-this-function-to-access-data-from-a-grist-desktop-app">Can I use this function to access data from a Grist Desktop app?</h4>
<p>When you open the Grist desktop app on Windows, it serves the api at <code>localhost:47478</code>. So yes, just make sure to do the following:</p>
<ol>
<li>The Grist desktop app is running serving the database you&rsquo;re trying to access.</li>
<li>Invoke the function with:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powerquery" data-lang="powerquery"><span style="display:flex;"><span>GetGristData(<span style="color:#e6db74">&#34;your_api_key&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;http://localhost:47478/&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;your_doc_id&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;your_table_name&#34;</span>)
</span></span></code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>Data Quality Issues in BAP‚Äôs Historical PHP/USD Rates</title>
      <link>https://deuts.org/p/bap-rates-data-issues/</link>
      <pubDate>Wed, 21 May 2025 13:47:58 +0800</pubDate>
      <guid>https://deuts.org/p/bap-rates-data-issues/</guid>
      <description>An analysis of the BAP‚Äôs historical PHP/USD rates shows multiple anomalies, including lost records, typos, and logical errors in pricing data.</description>
      <content:encoded><![CDATA[<p>Businesses often rely on the daily PHP/USD rates published by the <a href="https://bap.org.ph/"><strong>Bankers Association of the Philippines (BAP)</strong></a> for various financial decisions, from investment valuations to foreign exchange operations. Starting in <strong>June 2021</strong>, BAP began making their historical exchange rate data available through public <strong>Google Sheets</strong>, including not only daily rates but also trading volumes.</p>
<p>While the move to publish historical data is a step toward transparency, their choice of format‚ÄîGoogle Sheets‚Äîis notably out of touch with modern standards. Instead of offering a proper <strong>API endpoint</strong> for structured, automated access, BAP expects users to manually work with spreadsheets. This approach is inefficient and reflects a backward mentality that‚Äôs not commensurate with the needs of 21st-century data users. For a major financial industry player with such national relevance, adopting more developer-friendly, programmatic access methods is long overdue.</p>
<p>To assess the quality of the published data, I consolidated all available sheets and performed a thorough analysis. Here are some of the most glaring issues I found:</p>
<h3 id="unexplicable-data">Unexplicable Data</h3>
<p>An entry dated <strong>2019-09-13</strong> appears under the <code>February</code> sheet of the <a href="https://docs.google.com/spreadsheets/d/15afzEIAU7KZ-wJLbBmc4imb6GjVEMDkngoWQCK3YMSg/edit?gid=840189394#gid=840189394">2019 workbook</a>:</p>
<p><img loading="lazy" src="/p/bap-rates-data-issues/unexplicable-data.png"></p>
<p>This item doesn&rsquo;t belong in February and causes duplication for <strong>September 13, 2019</strong>, with completely different balances. It is unclear which entry is valid.</p>
<h3 id="unusually-high-number">Unusually High Number</h3>
<p>On <strong>May 20, 2021</strong>, the opening rate is recorded as <strong>478.855</strong>‚Äîfar outside the plausible range. It&rsquo;s likely a typographical error and should be <strong>47.855</strong>:</p>
<p><img loading="lazy" src="/p/bap-rates-data-issues/unually-high-number.png"></p>
<h3 id="duplicate-data-for-adjacent-dates">Duplicate Data for Adjacent Dates</h3>
<p>Some rows across <strong>adjacent dates</strong> have exactly the same values across <strong>all key fields</strong>, including:</p>
<ul>
<li>Open</li>
<li>High</li>
<li>Low</li>
<li>Close</li>
<li>AM/PM Weighted Averages and Volumes</li>
<li>Total Volume</li>
<li>Settlement</li>
</ul>
<p>This could indicate copy-paste or data rollover errors.</p>
<p><img loading="lazy" src="/p/bap-rates-data-issues/duplicate-data.png"></p>
<h3 id="high-is-less-than-low">High is Less than Low</h3>
<p>The <code>High</code> value should logically always be <strong>greater than or equal to</strong> the <code>Low</code>. However, there are rows where this is violated:</p>
<p><img loading="lazy" src="/p/bap-rates-data-issues/high-low.png"></p>
<h3 id="open-outside-of-high-and-low">Open Outside of High and Low</h3>
<p>The <code>Open</code> price should fall <strong>within</strong> the range of the <code>High</code> and <code>Low</code>, but some rows show it falling <strong>outside</strong>:</p>
<p><img loading="lazy" src="/p/bap-rates-data-issues/open-outside.png"></p>
<h3 id="close-outside-of-high-and-low">Close Outside of High and Low</h3>
<p>Similarly, <code>Close</code> should also fall within the daily high-low range, yet some entries show otherwise:</p>
<p><img loading="lazy" src="/p/bap-rates-data-issues/close-outside.png"></p>
<hr>
<p>These data issues show that BAP needs to improve validation and correct existing errors before publishing. Additionally, providing a proper, well-documented, and publicly available API endpoint is essential to enable reliable, automated access and support modern financial workflows. Addressing these will greatly enhance data accuracy and usability.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Comparing the Lightweight, Markdown, Selfhosted Wikis</title>
      <link>https://deuts.org/p/wiki-go-vs-wikidocs-vs-otterwiki/</link>
      <pubDate>Thu, 15 May 2025 11:50:40 +0800</pubDate>
      <guid>https://deuts.org/p/wiki-go-vs-wikidocs-vs-otterwiki/</guid>
      <description>Side-by-side comparison of Wiki-Go, WikiDocs, and Otterwiki ‚Äî three lightweight wiki engines using flat markdown files with no database required.</description>
      <content:encoded><![CDATA[<p>When it comes to managing documentation efficiently, I&rsquo;ve found that self-hosted wikis offer the perfect balance of control and simplicity. After exploring numerous options, I&rsquo;ve developed clear criteria for what makes an ideal wiki solution for my needs:</p>
<ul>
<li><strong>Database-free architecture</strong>: Content stored as markdown files for simplicity and portability</li>
<li><strong>Dynamic rendering</strong>: Pages rendered on-the-fly rather than pre-generated like static site generators like Hugo, Jekyll, or MkDocs</li>
<li><strong>Wiki-first design</strong>: Purpose-built for documentation rather than adapted from note-taking apps</li>
<li><strong>Containerized deployment</strong>: Easy installation via Docker compose</li>
</ul>
<p>These requirements have led me to focus on three promising solutions: Wiki-Go, WikiDocs, and Otterwiki. Each offers a different approach while meeting my core criteria.</p>
<div class="callout info">
  <div class="callout-content">
    <strong>These are features important to me!</strong>
    <p>
The features listed in the table below are the ones I find important to me personally. Your requirements might differ, so take those into consideration.
</p>
  </div>
</div>
<p>Here&rsquo;s how they compare:</p>
<table>
  <thead>
      <tr>
          <th>Feature</th>
          <th>Wiki-Go</th>
          <th>WikiDocs</th>
          <th>Otterwiki</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Programming Language</td>
          <td>Go</td>
          <td>PHP</td>
          <td>Python</td>
      </tr>
      <tr>
          <td>Advanced Table Editing</td>
          <td>‚ùå</td>
          <td>‚ùå</td>
          <td>‚úÖ</td>
      </tr>
      <tr>
          <td>Pretty URLs</td>
          <td>‚úÖ</td>
          <td>‚úÖ</td>
          <td>‚ùå (uses <code>%20</code> for spaces)</td>
      </tr>
      <tr>
          <td>Sidebar Page Ordering</td>
          <td>Number prefixing</td>
          <td>Number prefixing</td>
          <td>Alphabetical by title</td>
      </tr>
      <tr>
          <td>User Management</td>
          <td>Admin, Editor, Viewer roles</td>
          <td>Editor and Viewer passwords</td>
          <td>Semi-advanced + email registration</td>
      </tr>
      <tr>
          <td>Custom Sidebar Menu</td>
          <td>‚ùå (internal docs only)</td>
          <td>‚ùå (internal docs only)</td>
          <td>‚úÖ (including external links)</td>
      </tr>
      <tr>
          <td>Sitemap Auto-generation</td>
          <td>‚úÖ (XML and HTML)</td>
          <td>‚úÖ (XML)</td>
          <td>‚ùå</td>
      </tr>
      <tr>
          <td>Built-in Commenting</td>
          <td>‚úÖ</td>
          <td>‚ùå</td>
          <td>‚ùå</td>
      </tr>
      <tr>
          <td>Table of Contents</td>
          <td>‚úÖ (<code>[toc]</code> shortcode)</td>
          <td>‚úÖ (via shortcode)</td>
          <td>‚úÖ (automatic)</td>
      </tr>
      <tr>
          <td>Move/Rename Documents in UI</td>
          <td>‚úÖ</td>
          <td>‚ùå</td>
          <td>‚úÖ</td>
      </tr>
      <tr>
          <td>Callout/Admonition Support</td>
          <td>‚ùå</td>
          <td>‚ùå</td>
          <td>‚úÖ</td>
      </tr>
      <tr>
          <td>Ability to Remove Credits</td>
          <td>‚ùå</td>
          <td>‚ùå</td>
          <td>‚úÖ</td>
      </tr>
      <tr>
          <td>Paste from Clipboard as Attachment</td>
          <td>‚úÖ</td>
          <td>‚úÖ</td>
          <td>‚úÖ</td>
      </tr>
      <tr>
          <td>Wikilink Support</td>
          <td>‚ùå</td>
          <td>‚ùå</td>
          <td>‚úÖ</td>
      </tr>
      <tr>
          <td>Insert Link to Another Page in Editor</td>
          <td>‚úÖ (editor button)</td>
          <td>‚ùå</td>
          <td>‚úÖ (as Wikilink)</td>
      </tr>
      <tr>
          <td>Git Web Server Support</td>
          <td>‚ùå</td>
          <td>‚ùå</td>
          <td>‚úÖ</td>
      </tr>
      <tr>
          <td>Login Rate Limiting</td>
          <td>‚úÖ</td>
          <td>‚ùå</td>
          <td>‚ùå</td>
      </tr>
  </tbody>
</table>
<p><strong>Notes:</strong></p>
<ul>
<li>Wiki-Go and WikiDocs display the first H1 header of each document in the sidebar.</li>
<li>Otterwiki&rsquo;s table editing includes buttons to add/format tables, add/remove rows and columns, and move rows up/down and columns left/right.</li>
<li>For sidebar organization, Wiki-Go and WikiDocs require renaming pages with number prefixes, while Otterwiki uses alphabetical ordering (a custom menu can be managed manually).</li>
<li>Otterwiki supports user self-registration and password recovery when email settings are configured.</li>
<li>All three platforms automatically upload and embed images when pasting from clipboard.</li>
</ul>
<h2 id="final-thoughts">Final Thoughts</h2>
<p>After comparing these three wiki platforms, I find that Wiki-Go best suits my documentation workflow. Its clean URL structure, straightforward user interface, and built-in commenting system provide everything I need without unnecessary complexity. The ability to move and rename documents directly in the UI is particularly useful for maintaining organized documentation.</p>
<p>WikiDocs offers similar simplicity with the added benefit of automatic sitemap generation, while Otterwiki excels in advanced editing features and flexibility. Each platform has distinct advantages depending on your specific needs.</p>
<p>The beauty of file-based wikis is that your content remains portable as Markdown files, allowing you to easily migrate between platforms as your requirements evolve.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Samsung Galaxy S24 FE</title>
      <link>https://deuts.org/p/samsung-galaxy-s24-fe/</link>
      <pubDate>Sat, 03 May 2025 23:25:40 +0800</pubDate>
      <guid>https://deuts.org/p/samsung-galaxy-s24-fe/</guid>
      <description>Still priced at Php36,990, the Samsung Galaxy S24 FE 256GB is a tempting but pricey upgrade.</description>
      <content:encoded><![CDATA[<p>Samsung‚Äôs FE (Fan Edition) line has always offered flagship-level features at a more reasonable price point, and the Galaxy S24 FE looks no different. With an expected blend of performance, camera upgrades, and Samsung‚Äôs trademark display quality, it&rsquo;s a compelling option for anyone looking to upgrade their smartphone.</p>
<p>However, the current price tag of Php36,990 for the 256GB variant puts it out of the ‚Äúvalue for money‚Äù range for many, especially for those already using a previous FE model like the Galaxy S20 FE‚Äîwhich still holds up decently in 2025.</p>
<p>Should the Samsung Galaxy S24 FE with the 256GB storage become available at less than Php30,000.00, I‚Äôll probably consider getting one, to replace my aging Samsung Galaxy S20 FE.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Hugo vs. Material for MkDocs</title>
      <link>https://deuts.org/p/hugo-vs-mkdocs/</link>
      <pubDate>Fri, 07 Mar 2025 09:05:12 +0800</pubDate>
      <guid>https://deuts.org/p/hugo-vs-mkdocs/</guid>
      <description>A comparison of Hugo and Material for MkDocs for documentation sites, covering installation, customization, Obsidian integration, and more.</description>
      <content:encoded><![CDATA[<p>When building a documentation site, two popular options stand out: <strong>Hugo</strong> and <strong>Material for MkDocs</strong>. This post explores their key differences to help you decide which one suits your workflow best.</p>
<table>
  <thead>
      <tr>
          <th>Feature</th>
          <th>MkDocs (Material)</th>
          <th>Hugo</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>Main Purpose</strong></td>
          <td>Built specifically for documentation sites</td>
          <td>General-purpose static site generator</td>
      </tr>
      <tr>
          <td><strong>Ease of Use</strong></td>
          <td>Easier to set up and use, minimal configuration</td>
          <td>More complex due to templating and structure</td>
      </tr>
      <tr>
          <td><strong>Customization</strong></td>
          <td>Limited (some via plugins or JavaScript)</td>
          <td>Fully customizable via Go templating</td>
      </tr>
      <tr>
          <td><strong>Frontmatter Support</strong></td>
          <td>Supports frontmatter but with limited flexibility</td>
          <td>Full frontmatter support with conditional logic</td>
      </tr>
      <tr>
          <td><strong>Hiding Pages</strong></td>
          <td><code>hidden: true</code> in frontmatter</td>
          <td><code>draft: true</code> or excluding in menu templates</td>
      </tr>
      <tr>
          <td><strong>Dynamic Page Behavior</strong></td>
          <td>Limited (Markdown extensions, JavaScript, plugins)</td>
          <td>Fully supports conditionals and templating</td>
      </tr>
      <tr>
          <td><strong>Performance</strong></td>
          <td>Fast for small-to-medium sites</td>
          <td>Extremely fast, scales better for large sites</td>
      </tr>
      <tr>
          <td><strong>Search</strong></td>
          <td>Built-in instant search via Lunr.js</td>
          <td>No built-in search; requires third-party solutions (e.g., Algolia)</td>
      </tr>
      <tr>
          <td><strong>Image Handling</strong></td>
          <td>Can store images next to Markdown files</td>
          <td>Requires images outside <code>content/</code>, unless using page bundles</td>
      </tr>
      <tr>
          <td><strong>Multilingual Support</strong></td>
          <td>Basic support via MkDocs-Material extensions</td>
          <td>Native multilingual support built-in</td>
      </tr>
      <tr>
          <td><strong>Theme Customization</strong></td>
          <td>Material theme is highly polished and customizable via CSS/JS</td>
          <td>Requires modifying templates; themes vary in quality</td>
      </tr>
      <tr>
          <td><strong>Plugins &amp; Extensions</strong></td>
          <td>Supports plugins like <code>mkdocs-macros-plugin</code> and <code>mkdocs-material</code></td>
          <td>Vast ecosystem of themes and custom shortcodes</td>
      </tr>
      <tr>
          <td><strong>Obsidian Integration</strong></td>
          <td>Supports <code>[[wikilinks]]</code> and embedded images with plugins</td>
          <td>Requires converting <code>[[wikilinks]]</code>, no native embedded images</td>
      </tr>
      <tr>
          <td><strong>Blogging &amp; Other Content</strong></td>
          <td>Not ideal for non-documentation content</td>
          <td>Flexible for mixing documentation with blogs, portfolios, etc.</td>
      </tr>
  </tbody>
</table>
<h2 id="final-recommendation"><strong>Final Recommendation</strong></h2>
<ul>
<li><strong>Choose Hugo if</strong>: You need full customization, multilingual support, and high performance.</li>
<li><strong>Choose MkDocs if</strong>: You want a quick setup, built-in search, and better <strong>Obsidian compatibility</strong>.</li>
</ul>
<p>For a pure documentation site, <strong>Material for MkDocs</strong> is simpler. For flexibility and scalability, <strong>Hugo</strong> is the way to go.</p>
]]></content:encoded>
    </item>
    <item>
      <title>How Logseq can be a better choice over Obsidian</title>
      <link>https://deuts.org/p/logsec-vs-obsidian/</link>
      <pubDate>Tue, 04 Mar 2025 23:28:25 +0800</pubDate>
      <guid>https://deuts.org/p/logsec-vs-obsidian/</guid>
      <description>Logseq provides an intuitive outliner-first experience, seamless bidirectional linking, and powerful task management‚Äîall in an open-source package. This post explores why Logseq might be a better alternative to Obsidian for organizing your notes and ideas.</description>
      <content:encoded><![CDATA[<p>While both Logseq and Obsidian are excellent knowledge management tools, Logseq offers some distinct advantages that might make it more suitable for your workflow:</p>
<h3 id="why-logseq-might-be-a-better-choice">Why Logseq might be a better choice</h3>
<ul>
<li>
<p><strong>Outliner-First Approach</strong> - Logseq&rsquo;s hierarchical bullet-point structure makes organizing thoughts more intuitive. You can easily nest ideas and create structured content without worrying about formatting.</p>
</li>
<li>
<p><strong>Bidirectional Linking by Default</strong> - While Obsidian has backlinks, Logseq treats every reference as truly bidirectional, making connections between ideas more seamless.</p>
</li>
<li>
<p><strong>Daily Notes as Standard</strong> - Logseq automatically creates daily journals, encouraging regular documentation and making it easier to track thoughts chronologically.</p>
</li>
<li>
<p><strong>Open Source Philosophy</strong> - Logseq is fully open-source, which means greater transparency and community involvement in its development.</p>
</li>
<li>
<p><strong>Graph Database Backend</strong> - The underlying architecture makes complex queries and connections between your notes more powerful.</p>
</li>
<li>
<p><strong>Block References</strong> - You can reference and embed specific blocks (not just pages) throughout your notes, creating more granular connections.</p>
</li>
<li>
<p><strong>Task Management Built-In</strong> - Logseq has robust task management features with TODO states, priorities, and deadlines integrated directly into your notes.</p>
</li>
<li>
<p><strong>Whiteboarding Capabilities</strong> - Recent updates have added excellent whiteboarding features that combine well with the outliner approach.</p>
</li>
</ul>
<h3 id="summary-comparison">Summary Comparison</h3>
<table>
  <thead>
      <tr>
          <th>Feature</th>
          <th>Logseq</th>
          <th>Obsidian</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Core Structure</td>
          <td>Outliner-based (bullet points)</td>
          <td>Document-based (markdown files)</td>
      </tr>
      <tr>
          <td>Linking</td>
          <td>Bidirectional by default</td>
          <td>Backlinks as a feature</td>
      </tr>
      <tr>
          <td>Daily Notes</td>
          <td>Automatically created and integrated</td>
          <td>Available as a plugin</td>
      </tr>
      <tr>
          <td>Source Code</td>
          <td>Fully open-source</td>
          <td>Closed source with open plugin API</td>
      </tr>
      <tr>
          <td>Backend</td>
          <td>Graph database</td>
          <td>File-based system</td>
      </tr>
      <tr>
          <td>Referencing</td>
          <td>Block-level references</td>
          <td>Page-level references primarily</td>
      </tr>
      <tr>
          <td>Task Management</td>
          <td>Built-in TODO system with states</td>
          <td>Requires plugins for robust task management</td>
      </tr>
      <tr>
          <td>Whiteboarding</td>
          <td>Integrated whiteboard capabilities</td>
          <td>Available through plugins</td>
      </tr>
      <tr>
          <td>Data Storage</td>
          <td>Local plain text files (.md/.org)</td>
          <td>Local plain text files (.md)</td>
      </tr>
      <tr>
          <td>Pricing</td>
          <td>Free, open-source</td>
          <td>Free core, paid sync service</td>
      </tr>
  </tbody>
</table>
<h3 id="where-obsidian-still-shines">Where Obsidian Still Shines</h3>
<p>It&rsquo;s important to acknowledge Obsidian&rsquo;s strengths that make this decision difficult:</p>
<ul>
<li><strong>Mature plugin ecosystem:</strong> Thousands of community plugins for customization</li>
<li><strong>Document-centric approach:</strong> Better for long-form writing and publishing</li>
<li><strong>Performance with large vaults:</strong> Generally handles massive collections better</li>
<li><strong>Polished UI/UX:</strong> More refined interface and smoother experience</li>
<li><strong>Themes and customization:</strong> More options for personalizing appearance</li>
<li><strong>Mobile experience:</strong> Generally considered more mature on mobile devices</li>
</ul>
<h3 id="conclusion">Conclusion</h3>
<p>For now, my priority is mature ecosystem, document-centric approach, and polished experienced. Thus, Obsidian it is.</p>
]]></content:encoded>
    </item>
    <item>
      <title>SharePoint Folder vs. SharePoint List as a Power Apps Data Source</title>
      <link>https://deuts.org/p/sharepoint-folder-vs-list-power-apps/</link>
      <pubDate>Tue, 25 Feb 2025 16:08:02 +0800</pubDate>
      <guid>https://deuts.org/p/sharepoint-folder-vs-list-power-apps/</guid>
      <description>Explore the differences between using a SharePoint folder and a SharePoint list as a data source in Power Apps. Understand key limitations, such as delegation, filtering, patching, and metadata handling, to make the right choice for your app.</description>
      <content:encoded><![CDATA[<p>When building apps with <strong>Power Apps</strong>, many users like me who don&rsquo;t have premium licenses choose <strong>SharePoint</strong> as a data source. However, selecting between a <strong>SharePoint folder (document library)</strong> and a <strong>SharePoint list</strong> can significantly impact performance and functionality. This post explores the key differences and limitations when using a <strong>SharePoint folder</strong> compared to a <strong>SharePoint list</strong> in Power Apps.</p>
<h2 id="1-delegation-limits"><strong>1. Delegation Limits</strong></h2>
<p>Power Apps supports <strong>delegation</strong> for both SharePoint <strong>lists</strong> and <strong>document libraries</strong>, but with some key differences:</p>
<ul>
<li><strong>SharePoint lists</strong> support delegation for most column types, including <strong>Number, Choice, Text, and Date/Time</strong>.</li>
<li><strong>SharePoint document libraries</strong> also support delegation for <strong>custom columns</strong> (Number, Choice, Text, Date/Time, etc.).</li>
<li><strong>However, the <code>Name</code> (file name) and <code>Folder path</code> columns are NOT delegable</strong>, meaning Power Apps retrieves only a limited number of records (default: <strong>500</strong>, max: <strong>2,000</strong>).</li>
</ul>
<p>If you need to work with thousands of records and need to filter by <strong>file names or folder paths</strong>, a SharePoint <strong>list</strong> is the better choice. However, if filtering by <strong>custom columns</strong>, document libraries are still a valid option.</p>
<h2 id="2-filtering--sorting"><strong>2. Filtering &amp; Sorting</strong></h2>
<ul>
<li>In <strong>SharePoint lists</strong>, filtering and sorting are handled on the backend, making them efficient.</li>
<li>In <strong>SharePoint document libraries</strong>, filtering and sorting by <strong>custom columns</strong> (e.g., Number, Choice, Date) are delegable, but filtering by <strong>file name or folder path</strong> is not.</li>
</ul>
<h2 id="3-patch-support"><strong>3. Patch() Support</strong></h2>
<p>The <code>Patch()</code> function in Power Apps allows direct updates to <strong>SharePoint lists</strong>, making it easy to modify data without additional automation. <strong>For document libraries:</strong></p>
<ul>
<li><strong>You CAN patch custom columns</strong> (e.g., Number, Choice, Date/Time) directly.</li>
<li><strong>You CANNOT patch system columns like <code>Name</code> or <code>Folder path</code>.</strong></li>
<li>Workarounds require <strong>Power Automate</strong> to handle updates for system columns.</li>
</ul>
<h2 id="4-limited-file-handling"><strong>4. Limited File Handling</strong></h2>
<p>Power Apps can <strong>list files</strong> from a SharePoint folder but has no built-in file management capabilities. You <strong>cannot</strong>:</p>
<ul>
<li>Move files between folders.</li>
<li>Rename or delete files within Power Apps.</li>
</ul>
<p>Instead, you need <strong>Power Automate</strong> for these actions.</p>
<h2 id="5-performance-considerations"><strong>5. Performance Considerations</strong></h2>
<p>SharePoint has a <strong>list view threshold</strong> of <strong>5,000 items</strong>, which affects document libraries when viewed directly in <strong>SharePoint</strong>. However, in <strong>Power Apps</strong>, this limit can be bypassed using <strong>delegable queries</strong>.</p>
<ul>
<li>If using <strong>delegable functions</strong> (e.g., <code>Filter</code>, <code>Search</code>, <code>Sort</code> on supported columns), Power Apps can efficiently retrieve large datasets.</li>
<li>If querying non-delegable columns like <strong>file name (<code>Name</code>) or folder path (<code>Folder Path</code>)</strong>, Power Apps can only retrieve a limited number of records (500/2000 items).</li>
<li><strong>Indexed columns</strong> and optimized views in SharePoint can improve performance in both SharePoint and Power Apps.</li>
</ul>
<h2 id="6-metadata-handling"><strong>6. Metadata Handling</strong></h2>
<ul>
<li><strong>SharePoint lists</strong> have structured columns, relationships, and lookups, making data manipulation easier.</li>
<li><strong>SharePoint document libraries</strong> store metadata, and filtering by <strong>custom metadata columns</strong> is <strong>delegable</strong>, but accessing and modifying it from Power Apps requires additional effort.</li>
</ul>
<h2 id="when-to-use-sharepoint-lists-vs-folders-in-power-apps"><strong>When to Use SharePoint Lists vs. Folders in Power Apps</strong></h2>
<table>
  <thead>
      <tr>
          <th>Feature</th>
          <th>SharePoint List</th>
          <th>SharePoint Folder (Document Library)</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Delegation</td>
          <td>‚úÖ Yes</td>
          <td>‚úÖ Yes (except <code>Name</code> and <code>Folder path</code>)</td>
      </tr>
      <tr>
          <td>Filtering &amp; Sorting</td>
          <td>‚úÖ Efficient</td>
          <td>‚úÖ Efficient for custom columns (‚ùå Not for <code>Name</code> &amp; <code>Folder path</code>)</td>
      </tr>
      <tr>
          <td>Supports <code>Patch()</code></td>
          <td>‚úÖ Yes</td>
          <td>‚úÖ Yes (for custom columns) / ‚ùå No (for <code>Name</code> &amp; <code>Folder path</code>)</td>
      </tr>
      <tr>
          <td>File Management</td>
          <td>‚ùå No files, only data</td>
          <td>‚ùå Limited (No move/rename/delete)</td>
      </tr>
      <tr>
          <td>Large Data Support</td>
          <td>‚úÖ Optimized with indexes</td>
          <td>‚úÖ Yes (with delegable queries) / ‚ùå No (for <code>Name</code> &amp; <code>Folder path</code>)</td>
      </tr>
      <tr>
          <td>Metadata Handling</td>
          <td>‚úÖ Structured &amp; easy to update</td>
          <td>‚úÖ Delegable for custom columns, ‚ùå Not for <code>Name</code> &amp; <code>Folder path</code></td>
      </tr>
  </tbody>
</table>
<h3 id="final-thoughts"><strong>Final Thoughts</strong></h3>
<p>If your Power Apps solution requires <strong>structured data</strong>, complex filtering, and efficient data management, a <strong>SharePoint list</strong> is the best choice. However, if you need to work with <strong>files</strong>, be prepared for <strong>limitations in filtering by file names and folder paths</strong> when using a SharePoint folder.</p>
<p>For advanced file handling, consider integrating <strong>Power Automate</strong> to manage document library operations while using Power Apps for display and interaction.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Ensuring Updated Files in Power Query Without Cache Conflicts</title>
      <link>https://deuts.org/p/powerquery-bypass-cache/</link>
      <pubDate>Wed, 19 Feb 2025 08:54:57 +0800</pubDate>
      <guid>https://deuts.org/p/powerquery-bypass-cache/</guid>
      <description>A simple method to ensure that Power Query fetches the latest file version by appending a random query string to the URL.</description>
      <content:encoded><![CDATA[<p>When working with Power Query to fetch data from a web source, caching can sometimes prevent you from retrieving the most up-to-date file. This can be caused by either browser caching or server-side caching mechanisms.</p>
<p>To ensure you&rsquo;re always getting the latest version of your file, you can append a random query parameter to the file URL. This forces Power Query to treat each request as unique, bypassing any cached versions.</p>
<h3 id="solution">Solution</h3>
<p>Use the following Power Query (M) script:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powerquery" data-lang="powerquery"><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>     Source <span style="color:#f92672">=</span> Csv.Document(Web.Contents(<span style="color:#e6db74">&#34;https://example.domain.com/file.csv?&#34;</span> <span style="color:#f92672">&amp;</span> Number.ToText(Number.RoundDown(Number.RandomBetween(<span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">1000000</span>))))<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>         [Delimiter<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;,&#34;</span><span style="color:#f92672">,</span> Encoding<span style="color:#f92672">=</span><span style="color:#ae81ff">65001</span><span style="color:#f92672">,</span> QuoteStyle<span style="color:#f92672">=</span>QuoteStyle.None])<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>     #&#34;Promoted Headers&#34; <span style="color:#f92672">=</span> Table.PromoteHeaders(Source<span style="color:#f92672">,</span> [PromoteAllScalars<span style="color:#f92672">=</span><span style="color:#66d9ef">true</span>])
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>     #&#34;Promoted Headers&#34;
</span></span></code></pre></div><h3 id="how-it-works">How It Works</h3>
<ul>
<li>The <code>Web.Contents</code> function fetches the CSV file from the provided URL.</li>
<li>The <code>Number.RandomBetween(1, 1000000)</code> generates a random number.</li>
<li>This random number is appended as a query parameter, ensuring each request is treated as a unique request by the server.</li>
</ul>
<h3 id="benefits">Benefits</h3>
<ul>
<li>Prevents stale data from being loaded due to caching.</li>
<li>Ensures your Power Query reports always reflect the latest file updates.</li>
<li>Works seamlessly without needing server-side changes.</li>
</ul>
<p>By implementing this approach, you can confidently refresh your Power Query data without worrying about outdated cached files.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Two Handy Power Query Tricks for Custom Sorting and Error Handling</title>
      <link>https://deuts.org/p/pq-tricks-custom-sorting-error-handling/</link>
      <pubDate>Sat, 15 Feb 2025 23:52:12 +0800</pubDate>
      <guid>https://deuts.org/p/pq-tricks-custom-sorting-error-handling/</guid>
      <description>Learn two powerful Power Query tricks: custom sorting using `List.PositionOf` and filtering non-date values with the try and `[HasError]` functions.</description>
      <content:encoded><![CDATA[

    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/fQFVVpFyOlo?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>
    <div class="yt-separator">&nbsp;</div>

<h2 id="useful-power-query-tricks">Useful Power Query Tricks</h2>
<p>Power Query is a powerful tool for data transformation, and knowing a few advanced tricks can help you work more efficiently. Here are two techniques I learned from the above video.</p>
<h3 id="1-custom-sorting-in-power-query">1. Custom Sorting in Power Query</h3>
<p>By default, Power Query sorts data in ascending or descending order, but what if you need a custom order? For example, let‚Äôs say you have ratings labeled as <strong>E, A, B</strong>, and you want them sorted in that specific sequence. You can achieve this using the <code>List.PositionOf</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powerquery" data-lang="powerquery"><span style="display:flex;"><span><span style="color:#f92672">=</span> Table.Sort(Source<span style="color:#f92672">,</span> {<span style="color:#66d9ef">each</span> List.PositionOf({<span style="color:#e6db74">&#34;E&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;B&#34;</span>}<span style="color:#f92672">,</span> [Ratings])})
</span></span></code></pre></div><p>This method allows you to define an arbitrary order and sort the table accordingly. It‚Äôs especially useful when dealing with categorical data that doesn‚Äôt follow a standard numerical or alphabetical order.</p>
<h3 id="2-the-error-trick--filtering-non-date-values">2. The Error Trick ‚Äì Filtering Non-Date Values</h3>
<p>Sometimes, a dataset contains values that cannot be converted into a date. Instead of manually checking for errors, you can use the <code>try</code> function to filter out non-date values:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powerquery" data-lang="powerquery"><span style="display:flex;"><span><span style="color:#f92672">=</span> List.Select(Source<span style="color:#f92672">,</span> <span style="color:#66d9ef">each</span> (<span style="color:#66d9ef">try</span> Date.From(<span style="color:#e6db74">&#34;1&#34;</span> <span style="color:#f92672">&amp;</span> _))[HasError])
</span></span></code></pre></div><p>This formula attempts to convert each value into a date by prefixing it with &ldquo;1&rdquo; (to ensure a valid month-day format). If the conversion fails, the <code>[HasError]</code> property will be <code>true</code>, meaning the value is <strong>not</strong> a valid date. This trick helps you quickly identify and isolate (or keep, depending on your use case) problematic data.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
