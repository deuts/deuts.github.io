<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>All Posts on Deuts Log</title>
    <link>https://deuts.org/p/all/</link>
    <description>Recent content in All Posts on Deuts Log</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>en</language>
    <copyright>2024 Deuts Log</copyright>
    <lastBuildDate>Fri, 07 Mar 2025 09:05:12 +0800</lastBuildDate>
    <atom:link href="https://deuts.org/p/all/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo vs. Material for MkDocs</title>
      <link>https://deuts.org/p/hugo-vs-mkdocs/</link>
      <pubDate>Fri, 07 Mar 2025 09:05:12 +0800</pubDate>
      <guid>https://deuts.org/p/hugo-vs-mkdocs/</guid>
      <description>A comparison of Hugo and Material for MkDocs for documentation sites, covering installation, customization, Obsidian integration, and more.</description>
      <content:encoded><![CDATA[<p>When building a documentation site, two popular options stand out: <strong>Hugo</strong> and <strong>Material for MkDocs</strong>. This post explores their key differences to help you decide which one suits your workflow best.</p>
<table>
  <thead>
      <tr>
          <th>Feature</th>
          <th>MkDocs (Material)</th>
          <th>Hugo</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>Main Purpose</strong></td>
          <td>Built specifically for documentation sites</td>
          <td>General-purpose static site generator</td>
      </tr>
      <tr>
          <td><strong>Ease of Use</strong></td>
          <td>Easier to set up and use, minimal configuration</td>
          <td>More complex due to templating and structure</td>
      </tr>
      <tr>
          <td><strong>Customization</strong></td>
          <td>Limited (some via plugins or JavaScript)</td>
          <td>Fully customizable via Go templating</td>
      </tr>
      <tr>
          <td><strong>Frontmatter Support</strong></td>
          <td>Supports frontmatter but with limited flexibility</td>
          <td>Full frontmatter support with conditional logic</td>
      </tr>
      <tr>
          <td><strong>Hiding Pages</strong></td>
          <td><code>hidden: true</code> in frontmatter</td>
          <td><code>draft: true</code> or excluding in menu templates</td>
      </tr>
      <tr>
          <td><strong>Dynamic Page Behavior</strong></td>
          <td>Limited (Markdown extensions, JavaScript, plugins)</td>
          <td>Fully supports conditionals and templating</td>
      </tr>
      <tr>
          <td><strong>Performance</strong></td>
          <td>Fast for small-to-medium sites</td>
          <td>Extremely fast, scales better for large sites</td>
      </tr>
      <tr>
          <td><strong>Search</strong></td>
          <td>Built-in instant search via Lunr.js</td>
          <td>No built-in search; requires third-party solutions (e.g., Algolia)</td>
      </tr>
      <tr>
          <td><strong>Image Handling</strong></td>
          <td>Can store images next to Markdown files</td>
          <td>Requires images outside <code>content/</code>, unless using page bundles</td>
      </tr>
      <tr>
          <td><strong>Multilingual Support</strong></td>
          <td>Basic support via MkDocs-Material extensions</td>
          <td>Native multilingual support built-in</td>
      </tr>
      <tr>
          <td><strong>Theme Customization</strong></td>
          <td>Material theme is highly polished and customizable via CSS/JS</td>
          <td>Requires modifying templates; themes vary in quality</td>
      </tr>
      <tr>
          <td><strong>Plugins &amp; Extensions</strong></td>
          <td>Supports plugins like <code>mkdocs-macros-plugin</code> and <code>mkdocs-material</code></td>
          <td>Vast ecosystem of themes and custom shortcodes</td>
      </tr>
      <tr>
          <td><strong>Obsidian Integration</strong></td>
          <td>Supports <code>[[wikilinks]]</code> and embedded images with plugins</td>
          <td>Requires converting <code>[[wikilinks]]</code>, no native embedded images</td>
      </tr>
      <tr>
          <td><strong>Blogging &amp; Other Content</strong></td>
          <td>Not ideal for non-documentation content</td>
          <td>Flexible for mixing documentation with blogs, portfolios, etc.</td>
      </tr>
  </tbody>
</table>
<h2 id="final-recommendation"><strong>Final Recommendation</strong></h2>
<ul>
<li><strong>Choose Hugo if</strong>: You need full customization, multilingual support, and high performance.</li>
<li><strong>Choose MkDocs if</strong>: You want a quick setup, built-in search, and better <strong>Obsidian compatibility</strong>.</li>
</ul>
<p>For a pure documentation site, <strong>Material for MkDocs</strong> is simpler. For flexibility and scalability, <strong>Hugo</strong> is the way to go.</p>
]]></content:encoded>
    </item>
    <item>
      <title>How Logseq can be a better choice over Obsidian</title>
      <link>https://deuts.org/p/logsec-vs-obsidian/</link>
      <pubDate>Tue, 04 Mar 2025 23:28:25 +0800</pubDate>
      <guid>https://deuts.org/p/logsec-vs-obsidian/</guid>
      <description>Logseq provides an intuitive outliner-first experience, seamless bidirectional linking, and powerful task management—all in an open-source package. This post explores why Logseq might be a better alternative to Obsidian for organizing your notes and ideas.</description>
      <content:encoded><![CDATA[<p>While both Logseq and Obsidian are excellent knowledge management tools, Logseq offers some distinct advantages that might make it more suitable for your workflow:</p>
<h3 id="why-logseq-might-be-a-better-choice">Why Logseq might be a better choice</h3>
<ul>
<li>
<p><strong>Outliner-First Approach</strong> - Logseq&rsquo;s hierarchical bullet-point structure makes organizing thoughts more intuitive. You can easily nest ideas and create structured content without worrying about formatting.</p>
</li>
<li>
<p><strong>Bidirectional Linking by Default</strong> - While Obsidian has backlinks, Logseq treats every reference as truly bidirectional, making connections between ideas more seamless.</p>
</li>
<li>
<p><strong>Daily Notes as Standard</strong> - Logseq automatically creates daily journals, encouraging regular documentation and making it easier to track thoughts chronologically.</p>
</li>
<li>
<p><strong>Open Source Philosophy</strong> - Logseq is fully open-source, which means greater transparency and community involvement in its development.</p>
</li>
<li>
<p><strong>Graph Database Backend</strong> - The underlying architecture makes complex queries and connections between your notes more powerful.</p>
</li>
<li>
<p><strong>Block References</strong> - You can reference and embed specific blocks (not just pages) throughout your notes, creating more granular connections.</p>
</li>
<li>
<p><strong>Task Management Built-In</strong> - Logseq has robust task management features with TODO states, priorities, and deadlines integrated directly into your notes.</p>
</li>
<li>
<p><strong>Whiteboarding Capabilities</strong> - Recent updates have added excellent whiteboarding features that combine well with the outliner approach.</p>
</li>
</ul>
<h3 id="summary-comparison">Summary Comparison</h3>
<table>
  <thead>
      <tr>
          <th>Feature</th>
          <th>Logseq</th>
          <th>Obsidian</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Core Structure</td>
          <td>Outliner-based (bullet points)</td>
          <td>Document-based (markdown files)</td>
      </tr>
      <tr>
          <td>Linking</td>
          <td>Bidirectional by default</td>
          <td>Backlinks as a feature</td>
      </tr>
      <tr>
          <td>Daily Notes</td>
          <td>Automatically created and integrated</td>
          <td>Available as a plugin</td>
      </tr>
      <tr>
          <td>Source Code</td>
          <td>Fully open-source</td>
          <td>Closed source with open plugin API</td>
      </tr>
      <tr>
          <td>Backend</td>
          <td>Graph database</td>
          <td>File-based system</td>
      </tr>
      <tr>
          <td>Referencing</td>
          <td>Block-level references</td>
          <td>Page-level references primarily</td>
      </tr>
      <tr>
          <td>Task Management</td>
          <td>Built-in TODO system with states</td>
          <td>Requires plugins for robust task management</td>
      </tr>
      <tr>
          <td>Whiteboarding</td>
          <td>Integrated whiteboard capabilities</td>
          <td>Available through plugins</td>
      </tr>
      <tr>
          <td>Data Storage</td>
          <td>Local plain text files (.md/.org)</td>
          <td>Local plain text files (.md)</td>
      </tr>
      <tr>
          <td>Pricing</td>
          <td>Free, open-source</td>
          <td>Free core, paid sync service</td>
      </tr>
  </tbody>
</table>
<h3 id="where-obsidian-still-shines">Where Obsidian Still Shines</h3>
<p>It&rsquo;s important to acknowledge Obsidian&rsquo;s strengths that make this decision difficult:</p>
<ul>
<li><strong>Mature plugin ecosystem:</strong> Thousands of community plugins for customization</li>
<li><strong>Document-centric approach:</strong> Better for long-form writing and publishing</li>
<li><strong>Performance with large vaults:</strong> Generally handles massive collections better</li>
<li><strong>Polished UI/UX:</strong> More refined interface and smoother experience</li>
<li><strong>Themes and customization:</strong> More options for personalizing appearance</li>
<li><strong>Mobile experience:</strong> Generally considered more mature on mobile devices</li>
</ul>
<h3 id="conclusion">Conclusion</h3>
<p>For now, my priority is mature ecosystem, document-centric approach, and polished experienced. Thus, Obsidian it is.</p>
]]></content:encoded>
    </item>
    <item>
      <title>SharePoint Folder vs. SharePoint List as a Power Apps Data Source</title>
      <link>https://deuts.org/p/sharepoint-folder-vs-list-power-apps/</link>
      <pubDate>Tue, 25 Feb 2025 16:08:02 +0800</pubDate>
      <guid>https://deuts.org/p/sharepoint-folder-vs-list-power-apps/</guid>
      <description>Explore the differences between using a SharePoint folder and a SharePoint list as a data source in Power Apps. Understand key limitations, such as delegation, filtering, patching, and metadata handling, to make the right choice for your app.</description>
      <content:encoded><![CDATA[<p>When building apps with <strong>Power Apps</strong>, many users like me who don&rsquo;t have premium licenses choose <strong>SharePoint</strong> as a data source. However, selecting between a <strong>SharePoint folder (document library)</strong> and a <strong>SharePoint list</strong> can significantly impact performance and functionality. This post explores the key differences and limitations when using a <strong>SharePoint folder</strong> compared to a <strong>SharePoint list</strong> in Power Apps.</p>
<h2 id="1-delegation-limits"><strong>1. Delegation Limits</strong></h2>
<p>Power Apps supports <strong>delegation</strong> for both SharePoint <strong>lists</strong> and <strong>document libraries</strong>, but with some key differences:</p>
<ul>
<li><strong>SharePoint lists</strong> support delegation for most column types, including <strong>Number, Choice, Text, and Date/Time</strong>.</li>
<li><strong>SharePoint document libraries</strong> also support delegation for <strong>custom columns</strong> (Number, Choice, Text, Date/Time, etc.).</li>
<li><strong>However, the <code>Name</code> (file name) and <code>Folder path</code> columns are NOT delegable</strong>, meaning Power Apps retrieves only a limited number of records (default: <strong>500</strong>, max: <strong>2,000</strong>).</li>
</ul>
<p>If you need to work with thousands of records and need to filter by <strong>file names or folder paths</strong>, a SharePoint <strong>list</strong> is the better choice. However, if filtering by <strong>custom columns</strong>, document libraries are still a valid option.</p>
<h2 id="2-filtering--sorting"><strong>2. Filtering &amp; Sorting</strong></h2>
<ul>
<li>In <strong>SharePoint lists</strong>, filtering and sorting are handled on the backend, making them efficient.</li>
<li>In <strong>SharePoint document libraries</strong>, filtering and sorting by <strong>custom columns</strong> (e.g., Number, Choice, Date) are delegable, but filtering by <strong>file name or folder path</strong> is not.</li>
</ul>
<h2 id="3-patch-support"><strong>3. Patch() Support</strong></h2>
<p>The <code>Patch()</code> function in Power Apps allows direct updates to <strong>SharePoint lists</strong>, making it easy to modify data without additional automation. <strong>For document libraries:</strong></p>
<ul>
<li><strong>You CAN patch custom columns</strong> (e.g., Number, Choice, Date/Time) directly.</li>
<li><strong>You CANNOT patch system columns like <code>Name</code> or <code>Folder path</code>.</strong></li>
<li>Workarounds require <strong>Power Automate</strong> to handle updates for system columns.</li>
</ul>
<h2 id="4-limited-file-handling"><strong>4. Limited File Handling</strong></h2>
<p>Power Apps can <strong>list files</strong> from a SharePoint folder but has no built-in file management capabilities. You <strong>cannot</strong>:</p>
<ul>
<li>Move files between folders.</li>
<li>Rename or delete files within Power Apps.</li>
</ul>
<p>Instead, you need <strong>Power Automate</strong> for these actions.</p>
<h2 id="5-performance-considerations"><strong>5. Performance Considerations</strong></h2>
<p>SharePoint has a <strong>list view threshold</strong> of <strong>5,000 items</strong>, which affects document libraries when viewed directly in <strong>SharePoint</strong>. However, in <strong>Power Apps</strong>, this limit can be bypassed using <strong>delegable queries</strong>.</p>
<ul>
<li>If using <strong>delegable functions</strong> (e.g., <code>Filter</code>, <code>Search</code>, <code>Sort</code> on supported columns), Power Apps can efficiently retrieve large datasets.</li>
<li>If querying non-delegable columns like <strong>file name (<code>Name</code>) or folder path (<code>Folder Path</code>)</strong>, Power Apps can only retrieve a limited number of records (500/2000 items).</li>
<li><strong>Indexed columns</strong> and optimized views in SharePoint can improve performance in both SharePoint and Power Apps.</li>
</ul>
<h2 id="6-metadata-handling"><strong>6. Metadata Handling</strong></h2>
<ul>
<li><strong>SharePoint lists</strong> have structured columns, relationships, and lookups, making data manipulation easier.</li>
<li><strong>SharePoint document libraries</strong> store metadata, and filtering by <strong>custom metadata columns</strong> is <strong>delegable</strong>, but accessing and modifying it from Power Apps requires additional effort.</li>
</ul>
<h2 id="when-to-use-sharepoint-lists-vs-folders-in-power-apps"><strong>When to Use SharePoint Lists vs. Folders in Power Apps</strong></h2>
<table>
  <thead>
      <tr>
          <th>Feature</th>
          <th>SharePoint List</th>
          <th>SharePoint Folder (Document Library)</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>Delegation</td>
          <td>✅ Yes</td>
          <td>✅ Yes (except <code>Name</code> and <code>Folder path</code>)</td>
      </tr>
      <tr>
          <td>Filtering &amp; Sorting</td>
          <td>✅ Efficient</td>
          <td>✅ Efficient for custom columns (❌ Not for <code>Name</code> &amp; <code>Folder path</code>)</td>
      </tr>
      <tr>
          <td>Supports <code>Patch()</code></td>
          <td>✅ Yes</td>
          <td>✅ Yes (for custom columns) / ❌ No (for <code>Name</code> &amp; <code>Folder path</code>)</td>
      </tr>
      <tr>
          <td>File Management</td>
          <td>❌ No files, only data</td>
          <td>❌ Limited (No move/rename/delete)</td>
      </tr>
      <tr>
          <td>Large Data Support</td>
          <td>✅ Optimized with indexes</td>
          <td>✅ Yes (with delegable queries) / ❌ No (for <code>Name</code> &amp; <code>Folder path</code>)</td>
      </tr>
      <tr>
          <td>Metadata Handling</td>
          <td>✅ Structured &amp; easy to update</td>
          <td>✅ Delegable for custom columns, ❌ Not for <code>Name</code> &amp; <code>Folder path</code></td>
      </tr>
  </tbody>
</table>
<h3 id="final-thoughts"><strong>Final Thoughts</strong></h3>
<p>If your Power Apps solution requires <strong>structured data</strong>, complex filtering, and efficient data management, a <strong>SharePoint list</strong> is the best choice. However, if you need to work with <strong>files</strong>, be prepared for <strong>limitations in filtering by file names and folder paths</strong> when using a SharePoint folder.</p>
<p>For advanced file handling, consider integrating <strong>Power Automate</strong> to manage document library operations while using Power Apps for display and interaction.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Ensuring Updated Files in Power Query Without Cache Conflicts</title>
      <link>https://deuts.org/p/powerquery-bypass-cache/</link>
      <pubDate>Wed, 19 Feb 2025 08:54:57 +0800</pubDate>
      <guid>https://deuts.org/p/powerquery-bypass-cache/</guid>
      <description>A simple method to ensure that Power Query fetches the latest file version by appending a random query string to the URL.</description>
      <content:encoded><![CDATA[<p>When working with Power Query to fetch data from a web source, caching can sometimes prevent you from retrieving the most up-to-date file. This can be caused by either browser caching or server-side caching mechanisms.</p>
<p>To ensure you&rsquo;re always getting the latest version of your file, you can append a random query parameter to the file URL. This forces Power Query to treat each request as unique, bypassing any cached versions.</p>
<h3 id="solution">Solution</h3>
<p>Use the following Power Query (M) script:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powerquery" data-lang="powerquery"><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>     Source <span style="color:#f92672">=</span> Csv.Document(Web.Contents(<span style="color:#e6db74">&#34;https://example.domain.com/file.csv?&#34;</span> <span style="color:#f92672">&amp;</span> Number.ToText(Number.RoundDown(Number.RandomBetween(<span style="color:#ae81ff">1</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">1000000</span>))))<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>         [Delimiter<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;,&#34;</span><span style="color:#f92672">,</span> Encoding<span style="color:#f92672">=</span><span style="color:#ae81ff">65001</span><span style="color:#f92672">,</span> QuoteStyle<span style="color:#f92672">=</span>QuoteStyle.None])<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>     #&#34;Promoted Headers&#34; <span style="color:#f92672">=</span> Table.PromoteHeaders(Source<span style="color:#f92672">,</span> [PromoteAllScalars<span style="color:#f92672">=</span><span style="color:#66d9ef">true</span>])
</span></span><span style="display:flex;"><span> <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>     #&#34;Promoted Headers&#34;
</span></span></code></pre></div><h3 id="how-it-works">How It Works</h3>
<ul>
<li>The <code>Web.Contents</code> function fetches the CSV file from the provided URL.</li>
<li>The <code>Number.RandomBetween(1, 1000000)</code> generates a random number.</li>
<li>This random number is appended as a query parameter, ensuring each request is treated as a unique request by the server.</li>
</ul>
<h3 id="benefits">Benefits</h3>
<ul>
<li>Prevents stale data from being loaded due to caching.</li>
<li>Ensures your Power Query reports always reflect the latest file updates.</li>
<li>Works seamlessly without needing server-side changes.</li>
</ul>
<p>By implementing this approach, you can confidently refresh your Power Query data without worrying about outdated cached files.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Two Handy Power Query Tricks for Custom Sorting and Error Handling</title>
      <link>https://deuts.org/p/pq-tricks-custom-sorting-error-handling/</link>
      <pubDate>Sat, 15 Feb 2025 23:52:12 +0800</pubDate>
      <guid>https://deuts.org/p/pq-tricks-custom-sorting-error-handling/</guid>
      <description>Learn two powerful Power Query tricks: custom sorting using `List.PositionOf` and filtering non-date values with the try and `[HasError]` functions.</description>
      <content:encoded><![CDATA[

    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/fQFVVpFyOlo?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>
    <div class="yt-separator">&nbsp;</div>

<h2 id="useful-power-query-tricks">Useful Power Query Tricks</h2>
<p>Power Query is a powerful tool for data transformation, and knowing a few advanced tricks can help you work more efficiently. Here are two techniques I learned from the above video.</p>
<h3 id="1-custom-sorting-in-power-query">1. Custom Sorting in Power Query</h3>
<p>By default, Power Query sorts data in ascending or descending order, but what if you need a custom order? For example, let’s say you have ratings labeled as <strong>E, A, B</strong>, and you want them sorted in that specific sequence. You can achieve this using the <code>List.PositionOf</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powerquery" data-lang="powerquery"><span style="display:flex;"><span><span style="color:#f92672">=</span> Table.Sort(Source<span style="color:#f92672">,</span> {<span style="color:#66d9ef">each</span> List.PositionOf({<span style="color:#e6db74">&#34;E&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;B&#34;</span>}<span style="color:#f92672">,</span> [Ratings])})
</span></span></code></pre></div><p>This method allows you to define an arbitrary order and sort the table accordingly. It’s especially useful when dealing with categorical data that doesn’t follow a standard numerical or alphabetical order.</p>
<h3 id="2-the-error-trick--filtering-non-date-values">2. The Error Trick – Filtering Non-Date Values</h3>
<p>Sometimes, a dataset contains values that cannot be converted into a date. Instead of manually checking for errors, you can use the <code>try</code> function to filter out non-date values:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powerquery" data-lang="powerquery"><span style="display:flex;"><span><span style="color:#f92672">=</span> List.Select(Source<span style="color:#f92672">,</span> <span style="color:#66d9ef">each</span> (<span style="color:#66d9ef">try</span> Date.From(<span style="color:#e6db74">&#34;1&#34;</span> <span style="color:#f92672">&amp;</span> _))[HasError])
</span></span></code></pre></div><p>This formula attempts to convert each value into a date by prefixing it with &ldquo;1&rdquo; (to ensure a valid month-day format). If the conversion fails, the <code>[HasError]</code> property will be <code>true</code>, meaning the value is <strong>not</strong> a valid date. This trick helps you quickly identify and isolate (or keep, depending on your use case) problematic data.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Power Query Function to Find the Next Banking Day</title>
      <link>https://deuts.org/p/power-query-next-banking-day/</link>
      <pubDate>Wed, 05 Feb 2025 17:46:27 +0800</pubDate>
      <guid>https://deuts.org/p/power-query-next-banking-day/</guid>
      <description>This Power Query function determines the next banking day by skipping weekends and predefined holidays. It ensures accurate date calculations for financial transactions, reporting, and scheduling tasks that rely on valid banking days.</description>
      <content:encoded><![CDATA[<p>In financial analysis and reporting, it&rsquo;s crucial to account for non-banking days when processing dates. This Power Query function helps determine the next available banking day when given a date input. It skips weekends and holidays, ensuring that the returned date is a valid working day.</p>
<h2 id="how-the-function-works">How the Function Works</h2>
<ol>
<li>
<p><strong>Check for Non-Banking Days</strong></p>
<ul>
<li>The function <code>IsNonBankingDay</code> determines if a given date falls on a weekend (Saturday or Sunday) or is a holiday (from a predefined list).</li>
</ul>
</li>
<li>
<p><strong>Find the Next Banking Day</strong></p>
<ul>
<li>If the input date is a non-banking day, the function <code>GetNextBankingDay</code> recursively moves to the next day until it finds a valid banking day.</li>
</ul>
</li>
<li>
<p><strong>Return the Result</strong></p>
<ul>
<li>If the input date is already a banking day, it is returned unchanged. Otherwise, the function finds and returns the next available banking day.</li>
</ul>
</li>
</ol>
<h2 id="power-query-code">Power Query Code</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powerquery" data-lang="powerquery"><span style="display:flex;"><span>(inputDate <span style="color:#66d9ef">as</span> date) <span style="color:#f92672">=&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Helper function to check if a date is a non-banking day
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    IsNonBankingDay <span style="color:#f92672">=</span> (dateToCheck <span style="color:#66d9ef">as</span> date) <span style="color:#f92672">=&gt;</span> 
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>            IsHoliday <span style="color:#f92672">=</span> List.Contains(Holidays<span style="color:#f92672">,</span> dateToCheck)<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>            IsWeekend <span style="color:#f92672">=</span> Date.DayOfWeek(dateToCheck<span style="color:#f92672">,</span> Day.Monday) <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">in</span> 
</span></span><span style="display:flex;"><span>            IsHoliday <span style="color:#66d9ef">or</span> IsWeekend<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Recursive function to find next banking day
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    GetNextBankingDay <span style="color:#f92672">=</span> (dateToCheck <span style="color:#66d9ef">as</span> date) <span style="color:#f92672">=&gt;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>            NextDay <span style="color:#f92672">=</span> Date.AddDays(dateToCheck<span style="color:#f92672">,</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> IsNonBankingDay(NextDay) <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">@</span>GetNextBankingDay(NextDay)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>                NextDay<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Main logic
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    outputDate <span style="color:#f92672">=</span> <span style="color:#66d9ef">if</span> IsNonBankingDay(inputDate) 
</span></span><span style="display:flex;"><span>                     <span style="color:#66d9ef">then</span> GetNextBankingDay(inputDate) 
</span></span><span style="display:flex;"><span>                     <span style="color:#66d9ef">else</span> inputDate
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>    outputDate
</span></span></code></pre></div><p>Note: it is important that you have a query called <code>Holidays</code> which is a list of all holidays for the date range that covers your <code>inputDate</code>.</p>
<h3 id="recursive-function-call">Recursive Function Call</h3>
<p>In Power Query M language, the <code>@</code> symbol is used for recursive function calls. It&rsquo;s a self-reference operator that allows a function to call itself.</p>
<p>When you use <code>@GetNextBankingDay</code>, you&rsquo;re explicitly telling Power Query that you want to call the same function recursively. It&rsquo;s similar to how you might use <code>this</code> in other programming languages to refer to the current instance.</p>
<p>Here&rsquo;s a breakdown:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powerquery" data-lang="powerquery"><span style="display:flex;"><span>GetNextBankingDay <span style="color:#f92672">=</span> (dateToCheck <span style="color:#66d9ef">as</span> date) <span style="color:#f92672">=&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span>        NextDay <span style="color:#f92672">=</span> Date.AddDays(dateToCheck<span style="color:#f92672">,</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> IsNonBankingDay(NextDay) <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">@</span>GetNextBankingDay(NextDay)  <span style="color:#75715e">// Recursive call to the same function
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#75715e">//^ The @ here means &#34;this same function&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>            NextDay
</span></span></code></pre></div><p>Without the <code>@</code>, Power Query wouldn&rsquo;t know you&rsquo;re trying to make a recursive call to the same function you&rsquo;re currently defining. The <code>@</code> symbol makes this explicit and helps avoid any ambiguity, especially in cases where you might have functions with the same name in different scopes.</p>
<p>It&rsquo;s worth noting that while recursion is powerful, you should be careful with it as Power Query has limitations on recursion depth to prevent infinite loops.</p>
<h2 id="example-usage">Example Usage</h2>
<p>If <code>Holidays = {#date(2024, 1, 1), #date(2024, 12, 25)}</code> and you input:</p>
<ul>
<li><code>#date(2024, 1, 1) (New Year's Day - a holiday)</code> → Returns <code>#date(2024, 1, 2)</code></li>
<li><code>#date(2024, 6, 15) (Saturday)</code> → Returns <code>#date(2024, 6, 17)</code></li>
<li><code>#date(2024, 6, 18) (Tuesday)</code> → Returns <code>#date(2024, 6, 18)</code> (already a banking day)</li>
</ul>
<h2 id="why-use-this-function">Why Use This Function?</h2>
<ul>
<li><strong>Automates Banking Date Calculations</strong> – No need to manually adjust dates for non-working days.</li>
<li><strong>Ensures Accuracy in Financial Reports</strong> – Prevents transactions from being scheduled on closed banking days.</li>
<li><strong>Handles Custom Holiday Lists</strong> – Can be adapted to specific regional or company-defined holidays.</li>
</ul>
<p>This function is useful in scenarios such as payment processing, interest calculations, or any business process that relies on valid banking days.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Python vs Power Query: Understanding Lists and Dictionaries/Records</title>
      <link>https://deuts.org/p/python-power-query-lists-dictionaries-records/</link>
      <pubDate>Wed, 05 Feb 2025 09:42:15 +0800</pubDate>
      <guid>https://deuts.org/p/python-power-query-lists-dictionaries-records/</guid>
      <description>Python and Power Query are both powerful tools for data manipulation, but their syntax and data structures differ. Let&amp;#39;s explore the key similarities and differences between Python lists and dictionaries and Power Query lists and records, with examples and explanations to help you understand these fundamental concepts.</description>
      <content:encoded><![CDATA[<h3 id="introduction">Introduction</h3>
<p>When working with data in both Python and Power Query, you&rsquo;ll encounter several essential data structures—<strong>lists</strong> and <strong>dictionaries</strong> (or <strong>records</strong> in Power Query). While both languages share similar concepts for organizing data, their syntax and the way they handle data structures differ significantly.</p>
<p>Let&rsquo;s compare the basic data structures of lists and dictionaries in Python with their counterparts in Power Query: lists and records.</p>
<h3 id="what-is-a-list">What is a List?</h3>
<p>A <strong>list</strong> is an ordered collection of items. Both Python and Power Query support lists, but they are defined differently in each language.</p>
<h4 id="python-list">Python List</h4>
<p>In Python, a list is defined using <strong>square brackets <code>[]</code></strong>. It can contain any type of data—integers, strings, or even other lists.</p>
<h5 id="example">Example:</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>my_list <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#34;apple&#34;</span>]
</span></span><span style="display:flex;"><span>print(my_list)
</span></span></code></pre></div><p>Output:</p>
<pre tabindex="0"><code>[1, 2, 3, &#39;apple&#39;]
</code></pre><ul>
<li>Lists in Python are <strong>ordered</strong> and <strong>mutable</strong>, meaning you can change their contents after creation.</li>
<li>Lists are useful for storing collections of items in a specific order.</li>
</ul>
<h4 id="power-query-list">Power Query List</h4>
<p>In Power Query, a <strong>list</strong> is defined using <strong>curly braces <code>{}</code></strong>. Like Python lists, Power Query lists can store items of different types.</p>
<h5 id="example-1">Example:</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-m" data-lang="m"><span style="display:flex;"><span>myList <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#34;apple&#34;</span>}
</span></span></code></pre></div><ul>
<li>Power Query lists are <strong>ordered</strong> and can contain various data types.</li>
<li>Lists in Power Query are often used for operations like filtering, combining, or applying functions to the list&rsquo;s items.</li>
</ul>
<h3 id="what-is-a-dictionaryrecord">What is a Dictionary/Record?</h3>
<p>A <strong>dictionary</strong> (in Python) or a <strong>record</strong> (in Power Query) is a collection of <strong>key-value pairs</strong>. They allow you to store data in a way that you can easily look up a value by its corresponding key.</p>
<h4 id="python-dictionary">Python Dictionary</h4>
<p>In Python, a <strong>dictionary</strong> is defined using <strong>curly braces <code>{}</code></strong>, with <strong>key-value pairs</strong> separated by a colon <code>:</code>.</p>
<h5 id="example-2">Example:</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>my_dict <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;title&#34;</span>: <span style="color:#e6db74">&#34;Task 1&#34;</span>, <span style="color:#e6db74">&#34;slug&#34;</span>: <span style="color:#e6db74">&#34;task-1&#34;</span>}
</span></span><span style="display:flex;"><span>print(my_dict)
</span></span></code></pre></div><p>Output:</p>
<pre tabindex="0"><code>{&#39;title&#39;: &#39;Task 1&#39;, &#39;slug&#39;: &#39;task-1&#39;}
</code></pre><ul>
<li>Dictionaries in Python are <strong>unordered</strong> (before Python 3.7) and <strong>mutable</strong>.</li>
<li>You can access a value using its key:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(my_dict[<span style="color:#e6db74">&#34;title&#34;</span>])  <span style="color:#75715e"># Outputs: Task 1</span>
</span></span></code></pre></div></li>
</ul>
<h4 id="power-query-record">Power Query Record</h4>
<p>In Power Query, a <strong>record</strong> is similar to a dictionary, but it&rsquo;s defined using <strong>square brackets <code>[]</code></strong> and <strong>field-value pairs</strong>.</p>
<h5 id="example-3">Example:</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-m" data-lang="m"><span style="display:flex;"><span>myRecord <span style="color:#f92672">=</span> [title <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Task 1&#34;</span>, slug <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;task-1&#34;</span>]
</span></span></code></pre></div><ul>
<li>Power Query <strong>records</strong> store <strong>field-value pairs</strong>, similar to Python&rsquo;s dictionaries.</li>
<li>Records are commonly used when you need to structure data with labels, such as metadata or configuration settings.</li>
</ul>
<h3 id="key-differences">Key Differences</h3>
<table>
  <thead>
      <tr>
          <th>Concept</th>
          <th>Python</th>
          <th>Power Query</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>List</strong></td>
          <td>Defined with <strong><code>[]</code></strong>. Stores ordered data.</td>
          <td>Defined with <strong><code>{}</code></strong>. Stores ordered data.</td>
      </tr>
      <tr>
          <td><strong>Dictionary/Record</strong></td>
          <td>Defined with <strong><code>{}</code></strong>. Stores key-value pairs.</td>
          <td>Defined with <strong><code>[]</code></strong>. Stores field-value pairs.</td>
      </tr>
      <tr>
          <td><strong>Mutability</strong></td>
          <td>Both lists and dictionaries are <strong>mutable</strong>.</td>
          <td>Both lists and records are <strong>mutable</strong>.</td>
      </tr>
      <tr>
          <td><strong>Ordering</strong></td>
          <td>Lists are ordered. Dictionaries are unordered (before Python 3.7).</td>
          <td>Lists are ordered. Records don&rsquo;t have inherent order.</td>
      </tr>
      <tr>
          <td><strong>Accessing Values</strong></td>
          <td>Use index for lists, and key for dictionaries.</td>
          <td>Use index for lists, and field names for records.</td>
      </tr>
  </tbody>
</table>
<h3 id="conclusion">Conclusion</h3>
<p>While Python and Power Query use different syntax to define their data structures, the concepts of <strong>lists</strong> and <strong>dictionaries/records</strong> are quite similar. Lists are used for ordered collections of data, and dictionaries (or records in Power Query) are used for storing key-value pairs.</p>
<ul>
<li><strong>In Python</strong>, use <code>[]</code> for lists and <code>{}</code> for dictionaries.</li>
<li><strong>In Power Query</strong>, use <code>{}</code> for lists and <code>[]</code> for records.</li>
</ul>
<p>Understanding the similarities and differences between these data structures is crucial for working efficiently in both environments. I hope this comparison has helped clarify how to work with lists and dictionaries (or records) in Python and Power Query!</p>
]]></content:encoded>
    </item>
    <item>
      <title>RTM vs. Todoist: A Free User&#39;s Perspective</title>
      <link>https://deuts.org/p/rtm-vs-todoist-free/</link>
      <pubDate>Fri, 24 Jan 2025 08:48:23 +0800</pubDate>
      <guid>https://deuts.org/p/rtm-vs-todoist-free/</guid>
      <description>A practical comparison between the free versions of Remember The Milk (RTM) and Todoist, exploring key features like recurring tasks, task limits, smart lists, and integrations to help users choose the best productivity tool.</description>
      <content:encoded><![CDATA[<p>These days, staying organized and productive often comes down to finding the right tools. There are plenty of task management apps out there, but since I haven&rsquo;t yet found a good reason to pay for premium features, I&rsquo;ve been sticking to the free versions. Here, I&rsquo;ll compare two popular options: <strong>Remember The Milk (RTM)</strong> and <strong>Todoist</strong>.</p>
<h2 id="why-the-free-versions">Why the Free Versions?</h2>
<p>I&rsquo;m not against paying for apps. I just haven&rsquo;t seen enough value to justify the price yet. However, if I find an app truly compelling and invest significant time into it, I might upgrade in the future. For now, here&rsquo;s my take on how RTM and Todoist stack up.</p>
<h2 id="feature-comparison">Feature Comparison</h2>
<table>
  <thead>
      <tr>
          <th>Feature</th>
          <th>RTM</th>
          <th>Todoist</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>Permalink to Task</strong></td>
          <td>❌</td>
          <td>✅</td>
      </tr>
      <tr>
          <td><strong>Subtasks</strong></td>
          <td>❌</td>
          <td>✅</td>
      </tr>
      <tr>
          <td><strong>Natural Language Parsing</strong></td>
          <td>✅</td>
          <td>✅</td>
      </tr>
      <tr>
          <td><strong>Keyboard Shortcuts</strong></td>
          <td>✅</td>
          <td>✅</td>
      </tr>
      <tr>
          <td><strong>File Uploads</strong></td>
          <td>❌</td>
          <td>✅</td>
      </tr>
      <tr>
          <td><strong>Filters/Smart Lists</strong></td>
          <td>✅ <em>(No limit)</em></td>
          <td>❌ <em>(3 max)</em></td>
      </tr>
      <tr>
          <td><strong>Projects/Lists</strong></td>
          <td>✅ <em>(No limit)</em></td>
          <td>❌ <em>(5 max)</em></td>
      </tr>
  </tbody>
</table>
<h3 id="key-observations">Key Observations</h3>
<ul>
<li>
<p><strong>Permalink to Tasks</strong>:<br>
Todoist excels here, offering deep links to tasks. On mobile, it even opens directly in the app. This is great for quick access. RTM lacks this feature, which is a missed opportunity for seamless interaction.</p>
</li>
<li>
<p><strong>Subtasks</strong>:<br>
Todoist supports subtasks even in its free version. RTM, unfortunately, does not.</p>
</li>
<li>
<p><strong>Community Support</strong>:<br>
Todoist boasts a thriving Reddit community with 67K members, compared to RTM&rsquo;s modest 477. This disparity reflects RTM&rsquo;s slower development pace in recent years.</p>
</li>
<li>
<p><strong>API and Documentation</strong>:<br>
Both apps have API rate limits that are quite similar. However, Todoist&rsquo;s API documentation feels more polished and beginner-friendly.</p>
</li>
<li>
<p><strong>Recurring Tasks</strong>:<br>
Both RTM and Todoist handle recurring tasks correctly, treating each recurrence as a separate instance. This means that even if you postpone the current task or adjust its due date, the recurrence schedule remains unaffected—a behavior that some other task apps fail to implement properly.</p>
</li>
<li>
<p><strong>Free Limits</strong>:</p>
<ul>
<li>Todoist caps free users at <strong>3 filters</strong>, while RTM allows unlimited smart lists.</li>
<li>Todoist also limits projects to 5, whereas RTM has no such restrictions.</li>
</ul>
</li>
<li>
<p><strong>Workflow Adjustments</strong>:<br>
Switching from RTM to Todoist would mean adjusting my entire workflow. For example, RTM&rsquo;s <strong>lists</strong> are Todoist&rsquo;s <strong>projects</strong>, and tags differ in behavior. Todoist uses <code>#</code> for projects, while RTM uses <code>#</code> for tags. Keyboard shortcuts are also quite different.</p>
</li>
<li>
<p><strong>Task Limits</strong>:<br>
Todoist has a 300 active tasks per project limit, which may not be an issue for most users, but it&rsquo;s worth noting for larger-scale planning. See also: <a href="https://todoist.com/help/articles/usage-limits-in-todoist-e5rcSY">Usage limits in Todoists</a>.</p>
</li>
</ul>
<h2 id="final-thoughts">Final Thoughts</h2>
<p>Both apps have strengths and weaknesses, depending on your needs. Todoist feels more polished overall, especially with its integration features and user-friendly design. However, RTM shines for its flexibility, unlimited lists, and smart lists without a paywall.</p>
<p>While I&rsquo;m still testing Todoist, RTM has been my go-to for years. Will I make the switch? Time will tell, but for now, I&rsquo;ll keep experimenting.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Additional Documentation for Hugo PaperMod Post Cover Image</title>
      <link>https://deuts.org/p/add-docs-hugo-papermod-cover-image/</link>
      <pubDate>Sun, 05 Jan 2025 09:03:38 +0800</pubDate>
      <guid>https://deuts.org/p/add-docs-hugo-papermod-cover-image/</guid>
      <description>Here&amp;#39;s how to set up a cover image in Hugo PaperMod posts, including the use of relative paths in page bundles to ensure the image links are correctly resolved.</description>
      <content:encoded><![CDATA[<p>In the <a href="https://github.com/adityatelange/hugo-PaperMod/wiki/Features#post-cover-image">Hugo PaperMod wiki</a>, the process for adding a cover image to your posts is outlined. Below is the relevant frontmatter structure, taken directly from the wiki:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">cover</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">image</span>: <span style="color:#e6db74">&#34;&lt;image path/url&gt;&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># You can also use a direct link from an external site</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Example: https://i.ibb.co/K0HVPBd/paper-mod-profilemode.png</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">alt</span>: <span style="color:#e6db74">&#34;&lt;alt text&gt;&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">caption</span>: <span style="color:#e6db74">&#34;&lt;text&gt;&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">relative</span>: <span style="color:#66d9ef">false</span> <span style="color:#75715e"># Use relative path for cover image, particularly in Hugo page bundles</span>
</span></span></code></pre></div><p>If you&rsquo;re working with <a href="https://gohugo.io/content-management/page-bundles/">page bundles</a> and your file structure looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>├── cover-image.jpg
</span></span><span style="display:flex;"><span>└── index.md
</span></span></code></pre></div><p>The frontmatter should be adjusted as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">cover</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">image</span>: <span style="color:#e6db74">&#34;cover-image.jpg&#34;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">relative</span>: <span style="color:#66d9ef">true</span>
</span></span></code></pre></div><p>It&rsquo;s important to set <code>relative: true</code> when using page bundles. If this isn&rsquo;t set, the <code>&lt;head&gt;</code> of your page will contain an incorrect link, leading to a 404 error, like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">property</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;og:image&#34;</span> <span style="color:#a6e22e">content</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://deuts.org/cover-image.jpg&#34;</span>&gt;
</span></span></code></pre></div><p>Setting <code>relative: true</code> ensures that the image link is correctly handled within the page bundle, avoiding broken links.</p>
]]></content:encoded>
    </item>
    <item>
      <title>Hugo Automated Install and Update</title>
      <link>https://deuts.org/p/hugo-automated-install-and-update/</link>
      <pubDate>Fri, 03 Jan 2025 18:36:50 +0800</pubDate>
      <guid>https://deuts.org/p/hugo-automated-install-and-update/</guid>
      <description>Automate the process of fetching the latest Hugo Extended release directly from GitHub, downloading it, and installing it, making sure your system always runs the most up-to-date version. </description>
      <content:encoded><![CDATA[<p>Installing Hugo via package managers like apt on Linux (Debian, Ubuntu) often results in outdated versions, which can be delayed by months or even years. While installing Hugo directly from GitHub is the best way to stay current, manually downloading the .deb package each time a new version is released can be a chore. Many users find themselves putting off updates, leaving Hugo outdated for longer than they&rsquo;d like.</p>
<p>This simple script automates both the installation and updating of Hugo Extended to the latest version directly from GitHub. It checks if Hugo is installed, fetches the latest release, and installs it, all while eliminating the need for manual downloads or worrying about missing updates. It’s designed for the Hugo Extended amd64 Linux version but can be easily modified to suit different systems or versions.</p>
<h3 id="the-script">The Script</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Check if Hugo is installed by running `hugo version`</span>
</span></span><span style="display:flex;"><span>HUGO_VERSION<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>hugo version 2&gt;/dev/null<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> $? -ne <span style="color:#ae81ff">0</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># If hugo is not installed, print the message</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;Hugo is not yet installed.&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># If hugo is installed, display the current version</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;</span>$HUGO_VERSION<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Fetch the URL of the latest Hugo extended release for Linux (non-withdeploy version)</span>
</span></span><span style="display:flex;"><span>HUGO_URL<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>curl -s https://api.github.com/repos/gohugoio/hugo/releases/latest | <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>grep <span style="color:#e6db74">&#34;browser_download_url&#34;</span> | grep <span style="color:#e6db74">&#34;hugo_extended&#34;</span> | grep <span style="color:#e6db74">&#34;linux-amd64.deb&#34;</span> | grep -v <span style="color:#e6db74">&#34;withdeploy&#34;</span> | <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>sed -E <span style="color:#e6db74">&#39;s/.*&#34;([^&#34;]+)&#34;.*/\1/&#39;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Check if the URL was successfully retrieved</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> -z <span style="color:#e6db74">&#34;</span>$HUGO_URL<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;Error: Unable to retrieve the latest Hugo release URL.&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Extract the filename from the URL (e.g., hugo_extended_0.140.2_linux-amd64.deb)</span>
</span></span><span style="display:flex;"><span>FILE_NAME<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>basename <span style="color:#e6db74">&#34;</span>$HUGO_URL<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Prompt the user before downloading, based on whether Hugo is installed or not</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> -z <span style="color:#e6db74">&#34;</span>$HUGO_VERSION<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># If Hugo is not installed</span>
</span></span><span style="display:flex;"><span>    echo -n <span style="color:#e6db74">&#34;Latest Hugo Extended version is </span>$FILE_NAME<span style="color:#e6db74">. Do you want to download it? (y/n): &#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># If Hugo is installed</span>
</span></span><span style="display:flex;"><span>    echo -n <span style="color:#e6db74">&#34;Latest Hugo Extended version is </span>$FILE_NAME<span style="color:#e6db74">. Do you want to download it? (y/n): &#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>read -r RESPONSE
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> <span style="color:#e6db74">&#34;</span>$RESPONSE<span style="color:#e6db74">&#34;</span> !<span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;y&#34;</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;Download aborted.&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Download the latest Hugo .deb package with its original name</span>
</span></span><span style="display:flex;"><span>wget -q <span style="color:#e6db74">&#34;</span>$HUGO_URL<span style="color:#e6db74">&#34;</span> -O <span style="color:#e6db74">&#34;</span>$FILE_NAME<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">||</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;Error: Failed to download Hugo package.&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Prompt the user before installing</span>
</span></span><span style="display:flex;"><span>echo -n <span style="color:#e6db74">&#34;Do you want to install the Hugo package </span>$FILE_NAME<span style="color:#e6db74">? (y/n): &#34;</span>
</span></span><span style="display:flex;"><span>read -r RESPONSE
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> <span style="color:#e6db74">&#34;</span>$RESPONSE<span style="color:#e6db74">&#34;</span> !<span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;y&#34;</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;Installation aborted.&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Install the downloaded Hugo package</span>
</span></span><span style="display:flex;"><span>sudo dpkg -i <span style="color:#e6db74">&#34;</span>$FILE_NAME<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">||</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    echo <span style="color:#e6db74">&#34;Error: Failed to install Hugo package.&#34;</span>
</span></span><span style="display:flex;"><span>    exit <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Success message</span>
</span></span><span style="display:flex;"><span>echo <span style="color:#e6db74">&#34;Hugo package </span>$FILE_NAME<span style="color:#e6db74"> has been successfully installed.&#34;</span>
</span></span><span style="display:flex;"><span>hugo version
</span></span></code></pre></div><h3 id="how-to-use">How to Use</h3>
<ol>
<li>
<p><strong>Save and Make the Script Executable</strong><br>
Copy the script into a file (e.g., <code>update_hugo.sh</code>) and make it executable with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>chmod +x update_hugo.sh
</span></span></code></pre></div></li>
<li>
<p><strong>Run the Script</strong><br>
Execute the script with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>./update_hugo.sh
</span></span></code></pre></div><p>The script will check if Hugo is installed, prompt you to download the latest version (which will be saved in the same directory as the script), and ask if you want to install it.</p>
</li>
<li>
<p><strong>Verify Installation</strong><br>
Once installed, you can check the Hugo version with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hugo version
</span></span></code></pre></div></li>
</ol>
<h3 id="conclusion">Conclusion</h3>
<p>This script automates Hugo updates, ensuring you always have the latest version without the hassle of manual installation. Perfect for users who want to avoid outdated versions from <code>apt</code> and streamline their workflow, it keeps your Hugo installation current with minimal effort. Customize it for your own system and preferred version, and enjoy a seamless update process.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
